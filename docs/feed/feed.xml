<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Locke&#39;s Home</title>
	<subtitle>Locke&#39;s projects</subtitle>
	
	<link href="https://locke0.github.io/blog/feed/feed.xml" rel="self"/>
	<link href="https://locke0.github.io/blog"/>
	<updated>2024-01-19T19:00:00-05:00</updated>
	<id>https://locke0.github.io/blog/posts</id>
	<author>
		<name>Yangyue (Locke) Wang</name>
		<email></email>
	</author>
	
	<entry>
		<title>Solve the Kaggle Santa Puzzle</title>
		<link href="https://locke0.github.io/blog/posts/TheKaggleSantaCompetition/"/>
		<updated>2024-01-19T19:00:00-05:00</updated>
		<id>https://locke0.github.io/blog/posts/TheKaggleSantaCompetition/</id>
		<content type="html">
		  &lt;p&gt;Ok! Let‚Äôs try to solve the $25000 Kaggle Competition: Santa 2023 ‚Äî The Polytope Permutation Puzzle today.&lt;/p&gt;
&lt;p&gt;A little context, I have little experience with Kaggle competitions. In fact, this will be the 2nd Kaggle competition I‚Äôm participating with the first one being the infamous Titan Challenge. So I‚Äôm literally a noob ü§∑ (Sorry about the click bait. Oh well, I didn‚Äôt win). However, I have been really wanting to get into Kaggle more and get better at deep learning. This is why I‚Äôm writing this blog with the intention of showing how I approached a problem in a new or unfamiliar knowledge domain in term of navigating, researching, learning and problem solving.&lt;/p&gt;
&lt;p&gt;Alright, let‚Äôs dive in üò§!&lt;/p&gt;
&lt;h2 id=&quot;1-research&quot;&gt;1 Research &lt;a class=&quot;direct-link&quot; href=&quot;#1-research&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.1-problem&quot;&gt;1.1 Problem &lt;a class=&quot;direct-link&quot; href=&quot;#1.1-problem&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First, you have to do some research and understand the problem. Starting with the Overview page, here is what I gathered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Problem&lt;/strong&gt;: solve &lt;strong&gt;cube-like&lt;/strong&gt; puzzles in the &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;fewest&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt; moves&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permutation puzzle: comprises
&lt;ul&gt;
&lt;li&gt;solution state&lt;/li&gt;
&lt;li&gt;initial state&lt;/li&gt;
&lt;li&gt;colors whose arrangements make up states&lt;/li&gt;
&lt;li&gt;a set of allowed moves&lt;/li&gt;
&lt;li&gt;The resulting state may differ up to the puzzle‚Äôs &lt;code&gt;num_wildcards&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;overall score&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt; is the total number of moves in all of its puzzle solutions (fewest moves)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Submission file format:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$&#92;textrm{For each id, the moves} &#92;in &#92;textrm{allowed moves}$&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;moves&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;r1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f1&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;f1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;d0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;d0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;d0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;f0&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;f1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;d0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;d1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;d1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;f1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;f0&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So basically, you have to figure out the transitions between 2 states and each state is a matrix of numbers. Ok, let‚Äôs briefly take a look at the dataset.&lt;/p&gt;
&lt;h3 id=&quot;1.2-dataset&quot;&gt;1.2 Dataset &lt;a class=&quot;direct-link&quot; href=&quot;#1.2-dataset&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First, I looked at the&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;puzzle_info.csv:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;puzzle_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allowed_move&lt;/code&gt; - Each move represents a permutation given in array form&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, this file stores what moves are allowed for each puzzle type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;puzzle.csv&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puzzle_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;solution_state&lt;/code&gt; - ‚Äúcolors‚Äù separated by &lt;code&gt;;&lt;/code&gt; (e.g. a 2 by 2 by 2 cube would have  $4*6 = 24$ elements)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initial_state&lt;/code&gt; - an arrangement of colors describing the initial statecd cd&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_wildcards&lt;/code&gt; - so, nums of difference allowed in the final state (it doesn‚Äôt have to be exactly the required final state)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sample_submission.csv&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moves&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This just shows the moves from allowed_moves associated with each puzzle type&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1.3-first-impression-insights&quot;&gt;1.3 First Impression Insights &lt;a class=&quot;direct-link&quot; href=&quot;#1.3-first-impression-insights&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok. Let‚Äôs digest all that info and redefine our problem/objective:&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;
&#92;textrm{Minimize the number of transitions taken to get from state A to state B}&lt;br&gt;
$$&lt;/p&gt;
&lt;p&gt;When the problem is presented this way, we can start breaking down the problem into smaller components and steps&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we should probably find the proper data structures to store &lt;em&gt;states&lt;/em&gt; and &lt;em&gt;transitions&lt;/em&gt; since the given array or string forms might &lt;em&gt;not&lt;/em&gt; be the most convenient for modeling the $state &#92;rightarrow transition &#92;rightarrow state$ process/relation. From what I remember from my experience in robotics, maybe states can be represented as matrices instead of the given array form.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, I am still not sure about how to implement the specifics. I think I need more context and research. So, let‚Äôs see what discussions and solutions others have shared online. I started looking at the Discussion page for the competition, YouTube, and Google.&lt;/p&gt;
&lt;h3 id=&quot;1.4-%E2%80%9Cliterature-review%E2%80%9D&quot;&gt;1.4 ‚ÄúLiterature Review‚Äù &lt;a class=&quot;direct-link&quot; href=&quot;#1.4-%E2%80%9Cliterature-review%E2%80%9D&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.4.1 A Tutorial Notebook on The Discussion Page ‚Äî &lt;a href=&quot;https://www.kaggle.com/code/ryanholbrook/getting-started-with-santa-2023&quot;&gt;Getting Started with Santa 2023&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This tutorial gives the code for the basic setup, I‚Äôm glad I took a look at the Discussion and this would save me some time. Specifically, it shows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to &lt;em&gt;import&lt;/em&gt; and &lt;em&gt;parse&lt;/em&gt; the &lt;code&gt;puzzle_info&lt;/code&gt; and &lt;code&gt;puzzles&lt;/code&gt; into proper formats from corresponding files using pandas.&lt;/li&gt;
&lt;li&gt;How to &lt;em&gt;represent&lt;/em&gt; the puzzle states with &lt;code&gt;numpy.array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How to &lt;em&gt;represent&lt;/em&gt; the moves with &lt;code&gt;Permutation&lt;/code&gt; from the &lt;code&gt;sympy.combinatorics&lt;/code&gt; ‚Äî I had never used it before, here is its &lt;a href=&quot;https://docs.sympy.org/latest/modules/combinatorics/permutations.html&quot;&gt;documentation page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-problem-breakdown&quot;&gt;2 Problem Breakdown &lt;a class=&quot;direct-link&quot; href=&quot;#2-problem-breakdown&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

			
				
				
				&lt;img src=&quot;https://locke0.github.io/blog/api/ga?v=1&amp;_v=j83&amp;t=pageview&amp;dr=https%3A%2F%2Frss-feed-reader.com&amp;_s=1&amp;dh=locke0.github.io/blog&amp;dp=%2Fposts%2FTheKaggleSantaCompetition%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=Solve%20the%20Kaggle%20Santa%20Puzzle&amp;tid=G-ZVJSFTSLL4&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;display:none&quot; alt=&quot;&quot;&gt;
			
		</content>
	</entry>
</feed>
