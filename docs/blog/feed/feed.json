{
  "version": "https://jsonfeed.org/version/1",
  "title": "Locke&#39;s Home",
  "home_page_url": "https://locke0.github.io/blog",
  "feed_url": "https://locke0.github.io/feed/feed.json",
  "description": "projects, ideas, solutions",
  "author": {
    "name": "Yangyue (Locke) Wang",
    "url": ""
  },
  "items": [{
      "id": "https://locke0.github.io/blog/posts/TheKaggleSantaCompetition/",
      "url": "https://locke0.github.io/blog/posts/TheKaggleSantaCompetition/",
      "title": "Solve the Kaggle Santa Puzzle",
      "content_html": "<p>Ok! Let‚Äôs try to solve the $25000 Kaggle Competition: Santa 2023 ‚Äî The Polytope Permutation Puzzle today.</p>\n<p>A little context, I have little experience with Kaggle competitions. In fact, this will be the 2nd Kaggle competition I‚Äôm participating with the first one being the infamous Titan Challenge. So I‚Äôm literally a noob ü§∑ (Sorry about the click bait. Oh well, I didn‚Äôt win). However, I have been really wanting to get into Kaggle more and get better at deep learning. This is why I‚Äôm writing this blog with the intention of showing how I approached a problem in a new or unfamiliar knowledge domain in term of navigating, researching, learning and problem solving.</p>\n<p>Alright, let‚Äôs dive in üò§!</p>\n<h2 id=\"1-research\">1 Research <a class=\"direct-link\" href=\"#1-research\">#</a></h2>\n<h3 id=\"1.1-problem\">1.1 Problem <a class=\"direct-link\" href=\"#1.1-problem\">#</a></h3>\n<p>First, you have to do some research and understand the problem. Starting with the Overview page, here is what I gathered:</p>\n<ul>\n<li>\n<p><strong>The Problem</strong>: solve <strong>cube-like</strong> puzzles in the <strong><strong><strong><strong><strong><strong>fewest</strong></strong></strong></strong></strong></strong> moves</p>\n<ul>\n<li>Permutation puzzle: comprises\n<ul>\n<li>solution state</li>\n<li>initial state</li>\n<li>colors whose arrangements make up states</li>\n<li>a set of allowed moves</li>\n<li>The resulting state may differ up to the puzzle‚Äôs <code>num_wildcards</code></li>\n<li>The <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>overall score</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> is the total number of moves in all of its puzzle solutions (fewest moves)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Submission file format:</strong></p>\n<ul>\n<li>$\\textrm{For each id, the moves} \\in \\textrm{allowed moves}$</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>moves<br><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r1<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>f1<br><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>f1<span class=\"token punctuation\">.</span>d0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>r0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>f1<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>d0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>f1<span class=\"token punctuation\">.</span>d0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>r0<span class=\"token punctuation\">.</span>f0<br><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>f1<span class=\"token punctuation\">.</span>d0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>d1<span class=\"token punctuation\">.</span>r0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>d1<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>f0<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>r0<span class=\"token punctuation\">.</span><span class=\"token operator\">-</span>f0</code></pre>\n</li>\n</ul>\n<p>So basically, you have to figure out the transitions between 2 states and each state is a matrix of numbers. Ok, let‚Äôs briefly take a look at the dataset.</p>\n<h3 id=\"1.2-dataset\">1.2 Dataset <a class=\"direct-link\" href=\"#1.2-dataset\">#</a></h3>\n<p>First, I looked at the</p>\n<ul>\n<li>\n<p><strong>puzzle_info.csv:</strong></p>\n<ul>\n<li><code>puzzle_type</code></li>\n<li><code>allowed_move</code> - Each move represents a permutation given in array form</li>\n</ul>\n<p>Basically, this file stores what moves are allowed for each puzzle type.</p>\n</li>\n<li>\n<p><strong><strong><strong><strong><strong><strong><strong><strong>puzzle.csv</strong></strong></strong></strong></strong></strong></strong></strong></p>\n<ul>\n<li><code>id</code></li>\n<li><code>puzzle_type</code></li>\n<li><code>solution_state</code> - ‚Äúcolors‚Äù separated by <code>;</code> (e.g. a 2 by 2 by 2 cube would have  $4*6 = 24$ elements)</li>\n<li><code>initial_state</code> - an arrangement of colors describing the initial statecd cd</li>\n<li><code>num_wildcards</code> - so, nums of difference allowed in the final state (it doesn‚Äôt have to be exactly the required final state)</li>\n</ul>\n</li>\n<li>\n<p><strong>sample_submission.csv</strong></p>\n<ul>\n<li><code>id</code></li>\n<li><code>moves</code></li>\n</ul>\n<p>This just shows the moves from allowed_moves associated with each puzzle type</p>\n</li>\n</ul>\n<h3 id=\"1.3-first-impression-insights\">1.3 First Impression Insights <a class=\"direct-link\" href=\"#1.3-first-impression-insights\">#</a></h3>\n<p>Ok. Let‚Äôs digest all that info and redefine our problem/objective:</p>\n<p>$$<br>\n\\textrm{Minimize the number of transitions taken to get from state A to state B}<br>\n$$</p>\n<p>When the problem is presented this way, we can start breaking down the problem into smaller components and steps</p>\n<p><strong>First</strong>, we should probably find the proper data structures to store <em>states</em> and <em>transitions</em> since the given array or string forms might <em>not</em> be the most convenient for modeling the $state \\rightarrow transition \\rightarrow state$ process/relation. From what I remember from my experience in robotics, maybe states can be represented as matrices instead of the given array form.</p>\n<p><strong>However</strong>, I am still not sure about how to implement the specifics. I think I need more context and research. So, let‚Äôs see what discussions and solutions others have shared online. I started looking at the Discussion page for the competition, YouTube, and Google.</p>\n<h3 id=\"1.4-%E2%80%9Cliterature-review%E2%80%9D\">1.4 ‚ÄúLiterature Review‚Äù <a class=\"direct-link\" href=\"#1.4-%E2%80%9Cliterature-review%E2%80%9D\">#</a></h3>\n<p><strong>1.4.1 A Tutorial Notebook on The Discussion Page ‚Äî <a href=\"https://www.kaggle.com/code/ryanholbrook/getting-started-with-santa-2023\">Getting Started with Santa 2023</a>.</strong></p>\n<p>This tutorial gives the code for the basic setup, I‚Äôm glad I took a look at the Discussion and this would save me some time. Specifically, it shows:</p>\n<ul>\n<li>How to <em>import</em> and <em>parse</em> the <code>puzzle_info</code> and <code>puzzles</code> into proper formats from corresponding files using pandas.</li>\n<li>How to <em>represent</em> the puzzle states with <code>numpy.array</code></li>\n<li>How to <em>represent</em> the moves with <code>Permutation</code> from the <code>sympy.combinatorics</code> ‚Äî I had never used it before, here is its <a href=\"https://docs.sympy.org/latest/modules/combinatorics/permutations.html\">documentation page</a></li>\n<li></li>\n</ul>\n<h2 id=\"2-problem-breakdown\">2 Problem Breakdown <a class=\"direct-link\" href=\"#2-problem-breakdown\">#</a></h2>\n<ol>\n<li></li>\n</ol>\n",
      "date_published": "2024-01-19T19:00:00-05:00"
    }
  ]
}
